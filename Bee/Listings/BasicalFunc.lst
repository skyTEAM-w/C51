C51 COMPILER V9.60.0.0   BASICALFUNC                                                       01/25/2022 15:04:29 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BASICALFUNC
OBJECT MODULE PLACED IN .\Objects\BasicalFunc.obj
COMPILER INVOKED BY: D:\Program files\Keil\C51\BIN\C51.EXE BasicalFunc.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\BasicalFunc.lst) TABS(2) OBJECT(.\Objects\BasicalFunc.obj)

line level    source

   1          /**
   2           * @file BasicalFunc.c
   3           * @author WuChengpei_Sky (w2563070231@outlook.com)
   4           * @brief 人人卓越工程51单片机常用函数库的实现
   5           * @version 1.3
   6           * @date 2022-01-18
   7           *
   8           * @copyright Copyright (c) 2022
   9           *
  10           */
  11          
  12          #include <REGX52.H>
  13          #include <INTRINS.H>
  14          
  15          #define DS1302_SECOND   0x80
  16          #define DS1302_MINUTE   0x82
  17          #define DS1302_HOUR     0x84
  18          #define DS1302_DATE     0x86
  19          #define DS1302_MONTH    0x88
  20          #define DS1302_DAY      0x8A
  21          #define DS1302_YEAR     0x8C
  22          #define DS1302_WP       0x8E
  23          // #include <NomalFunc.h>
  24          
  25          /*---------------------------------------
  26          Delay
  27          ---------------------------------------*/
  28          
  29          /**
  30           * @brief 延时X毫秒
  31           *
  32           * @param X_ms 延迟的毫秒数
  33           * @retval 无
  34           */
  35          void Delay(unsigned int X_ms) //@12.000MHz
  36          {
  37   1          unsigned char i, j;
  38   1          while (X_ms--)
  39   1          {
  40   2              /* code */
  41   2              i = 2;
  42   2              j = 239;
  43   2              do
  44   2              {
  45   3                  while (--j)
  46   3                      ;
  47   3              } while (--i);
  48   2          }
  49   1      }
  50          
  51          /*---------------------------------------
  52          SEG Tube
  53          ---------------------------------------*/
  54          unsigned char code SEGNum[] = {
C51 COMPILER V9.60.0.0   BASICALFUNC                                                       01/25/2022 15:04:29 PAGE 2   

  55              0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
  56              0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71,
  57              0x00}; // Make an Arry to save the one's complement of SEG
  58          
  59          unsigned char code SEGSign[] = {
  60              0x7F, 0xBF
  61          };
  62          
  63          /**
  64           * @brief 数码管显示数字
  65           *
  66           * @param Location 显示位置
  67           * @param Number 显示的数字
  68           * @retval 无
  69           */
  70          void SEG(unsigned char Location, unsigned char Number)
  71          { // Use SEG Tube Show Setted Number
  72   1          P1 = ~(0x01 << (8 - Location));
  73   1          P0 = ~SEGNum[Number];
  74   1          // Delay(1);
  75   1          // P0 = 0xFF;
  76   1      }
  77          
  78          /**
  79           * @brief 数码管扫描函数，最大可在数码管中显示0~65535范围内的整数。
  80           * 格式：右对齐
  81           * 
  82           * @param Data 显示的数据 范围：
  83           * L_MODE与R_MODE：0~9999
  84           * N_MODE:0~65535
  85           * @param ScanMode 输出模式：
  86           * 'L''l'：左侧数码管输出
  87           * 'R''r'：右侧数码管输出
  88           * 'N''n'：双侧数码管共同输出
  89           */
  90          void SEGScan(unsigned int Data, char ScanMode)
  91          {
  92   1          unsigned char TempData[8];
  93   1          int count = 0;
  94   1          switch (ScanMode)
  95   1          {
  96   2          case 'l':
  97   2          case 'L':
  98   2          {
  99   3              TempData[0] = SEGNum[Data / 1000];
 100   3              TempData[1] = SEGNum[(Data % 1000) / 100];
 101   3              TempData[2] = SEGNum[((Data % 1000) % 100) / 10];
 102   3              TempData[3] = SEGNum[((Data % 1000) % 100) % 10];
 103   3              for (count = 0; count < 3 && TempData[count] == 0x3F; count++)
 104   3              {
 105   4                  TempData[count] = 0x00;
 106   4              }
 107   3              for (count = 1; count <= 4; count++)
 108   3              {
 109   4                  P1 = ~(0x01 << (8 - count));
 110   4                  P0 = ~TempData[count - 1];
 111   4                  Delay(1);
 112   4                  P0 = 0xFF;
 113   4              }
 114   3              break;
 115   3          }
 116   2          case 'r':
C51 COMPILER V9.60.0.0   BASICALFUNC                                                       01/25/2022 15:04:29 PAGE 3   

 117   2          case 'R':
 118   2          {
 119   3              TempData[4] = SEGNum[Data / 1000];
 120   3              TempData[5] = SEGNum[(Data % 1000) / 100];
 121   3              TempData[6] = SEGNum[((Data % 1000) % 100) / 10];
 122   3              TempData[7] = SEGNum[((Data % 1000) % 100) % 10];
 123   3              for (count = 4; count < 7 && TempData[count] == 0x3F; count++)
 124   3              {
 125   4                  TempData[count] = 0x00;
 126   4              }
 127   3              for (count = 4; count <= 8; count++)
 128   3              {
 129   4                  P1 = ~(0x01 << (8 - count));
 130   4                  P0 = ~TempData[count - 1];
 131   4                  Delay(1);
 132   4                  P0 = 0xFF;
 133   4              }
 134   3              break;
 135   3          }
 136   2          case 'n':
 137   2          case 'N':
 138   2          {
 139   3              unsigned int Mode = 10;
 140   3              for (count = 7; count >= 0; count--)
 141   3              {
 142   4                  TempData[count] = SEGNum[Data % Mode];
 143   4                  Data = Data / 10;
 144   4              }
 145   3              for (count = 0; count < 4 && TempData[count] == 0x3F; count++)
 146   3              {
 147   4                  TempData[count] = 0x00;
 148   4              }
 149   3              for (count = 4; count < 7 && TempData[count] == 0x3F; count++)
 150   3              {
 151   4                  TempData[count] = 0x00;
 152   4              }
 153   3              for (count = 1; count <= 8; count++)
 154   3              {
 155   4                  P1 = ~(0x01 << (8 - count));
 156   4                  P0 = ~TempData[count - 1];
 157   4                  Delay(1);
 158   4                  P0 = 0xFF;
 159   4              }
 160   3              break;
 161   3          }
 162   2          }
 163   1      }
 164          
 165          /*---------------------------------------
 166          LCD1602
 167          ---------------------------------------*/
 168          //引脚配置：
 169          sbit LCD_RS = 0x90;
 170          sbit LCD_RW = 0x91;
 171          sbit LCD_EN = 0x92;
 172          #define LCD_DataPort P0
 173          
 174          //函数定义：
 175          /**
 176           * @brief  LCD1602延时函数，12MHz调用可延时1ms
 177           * @param  无
 178           * @retval 无
C51 COMPILER V9.60.0.0   BASICALFUNC                                                       01/25/2022 15:04:29 PAGE 4   

 179           */
 180          void LCD_Delay()
 181          {
 182   1          unsigned char i, j;
 183   1      
 184   1          i = 2;
 185   1          j = 239;
 186   1          do
 187   1          {
 188   2              while (--j)
 189   2                  ;
 190   2          } while (--i);
 191   1      }
 192          
 193          /**
 194           * @brief  LCD1602写命令
 195           * @param  Command 要写入的命令
 196           * @retval 无
 197           */
 198          void LCD_WriteCommand(unsigned char Command)
 199          {
 200   1          LCD_RS = 0;
 201   1          LCD_RW = 0;
 202   1          LCD_DataPort = Command;
 203   1          LCD_EN = 1;
 204   1          LCD_Delay();
 205   1          LCD_EN = 0;
 206   1          LCD_Delay();
 207   1      }
 208          
 209          /**
 210           * @brief  LCD1602写数据
 211           * @param  Data 要写入的数据
 212           * @retval 无
 213           */
 214          void LCD_WriteData(unsigned char Data)
 215          {
 216   1          LCD_RS = 1;
 217   1          LCD_RW = 0;
 218   1          LCD_DataPort = Data;
 219   1          LCD_EN = 1;
 220   1          LCD_Delay();
 221   1          LCD_EN = 0;
 222   1          LCD_Delay();
 223   1      }
 224          
 225          /**
 226           * @brief  LCD1602设置光标位置
 227           * @param  Line 行位置，范围：1~2
 228           * @param  Column 列位置，范围：1~16
 229           * @retval 无
 230           */
 231          void LCD_SetCursor(unsigned char Line, unsigned char Column)
 232          {
 233   1          if (Line == 1)
 234   1          {
 235   2              LCD_WriteCommand(0x80 | (Column - 1));
 236   2          }
 237   1          else if (Line == 2)
 238   1          {
 239   2              LCD_WriteCommand(0x80 | (Column - 1 + 0x40));
 240   2          }
C51 COMPILER V9.60.0.0   BASICALFUNC                                                       01/25/2022 15:04:29 PAGE 5   

 241   1      }
 242          
 243          /**
 244           * @brief  LCD1602初始化函数
 245           * @param  无
 246           * @retval 无
 247           */
 248          void LCD_Init()
 249          {
 250   1          LCD_WriteCommand(0x38); //八位数据接口，两行显示，5*7点阵
 251   1          LCD_WriteCommand(0x0c); //显示开，光标关，闪烁关
 252   1          LCD_WriteCommand(0x06); //数据读写操作后，光标自动加一，画面不动
 253   1          LCD_WriteCommand(0x01); //光标复位，清屏
 254   1      }
 255          
 256          /**
 257           * @brief  在LCD1602指定位置上显示一个字符
 258           * @param  Line 行位置，范围：1~2
 259           * @param  Column 列位置，范围：1~16
 260           * @param  Char 要显示的字符
 261           * @retval 无
 262           */
 263          void LCD_ShowChar(unsigned char Line, unsigned char Column, char Char)
 264          {
 265   1          LCD_SetCursor(Line, Column);
 266   1          LCD_WriteData(Char);
 267   1      }
 268          
 269          /**
 270           * @brief  在LCD1602指定位置开始显示所给字符串
 271           * @param  Line 起始行位置，范围：1~2
 272           * @param  Column 起始列位置，范围：1~16
 273           * @param  String 要显示的字符串
 274           * @retval 无
 275           */
 276          void LCD_ShowString(unsigned char Line, unsigned char Column, char *String)
 277          {
 278   1          unsigned char i;
 279   1          LCD_SetCursor(Line, Column);
 280   1          for (i = 0; String[i] != '\0'; i++)
 281   1          {
 282   2              LCD_WriteData(String[i]);
 283   2          }
 284   1      }
 285          
 286          /**
 287           * @brief  返回值=X的Y次方
 288           */
 289          int LCD_Pow(int X, int Y)
 290          {
 291   1          unsigned char i;
 292   1          int Result = 1;
 293   1          for (i = 0; i < Y; i++)
 294   1          {
 295   2              Result *= X;
 296   2          }
 297   1          return Result;
 298   1      }
 299          
 300          /**
 301           * @brief  在LCD1602指定位置开始显示所给数字
 302           * @param  Line 起始行位置，范围：1~2
C51 COMPILER V9.60.0.0   BASICALFUNC                                                       01/25/2022 15:04:29 PAGE 6   

 303           * @param  Column 起始列位置，范围：1~16
 304           * @param  Number 要显示的数字，范围：0~65535
 305           * @param  Length 要显示数字的长度，范围：1~5
 306           * @retval 无
 307           */
 308          void LCD_ShowNum(unsigned char Line, unsigned char Column, unsigned int Number, unsigned char Length)
 309          {
 310   1          unsigned char i;
 311   1          LCD_SetCursor(Line, Column);
 312   1          for (i = Length; i > 0; i--)
 313   1          {
 314   2              LCD_WriteData(Number / LCD_Pow(10, i - 1) % 10 + '0');
 315   2          }
 316   1      }
 317          
 318          /**
 319           * @brief  在LCD1602指定位置开始以有符号十进制显示所给数字
 320           * @param  Line 起始行位置，范围：1~2
 321           * @param  Column 起始列位置，范围：1~16
 322           * @param  Number 要显示的数字，范围：-32768~32767
 323           * @param  Length 要显示数字的长度，范围：1~5
 324           * @retval 无
 325           */
 326          void LCD_ShowSignedNum(unsigned char Line, unsigned char Column, int Number, unsigned char Length)
 327          {
 328   1          unsigned char i;
 329   1          unsigned int Number1;
 330   1          LCD_SetCursor(Line, Column);
 331   1          if (Number >= 0)
 332   1          {
 333   2              LCD_WriteData('+');
 334   2              Number1 = Number;
 335   2          }
 336   1          else
 337   1          {
 338   2              LCD_WriteData('-');
 339   2              Number1 = -Number;
 340   2          }
 341   1          for (i = Length; i > 0; i--)
 342   1          {
 343   2              LCD_WriteData(Number1 / LCD_Pow(10, i - 1) % 10 + '0');
 344   2          }
 345   1      }
 346          
 347          /**
 348           * @brief  在LCD1602指定位置开始以十六进制显示所给数字
 349           * @param  Line 起始行位置，范围：1~2
 350           * @param  Column 起始列位置，范围：1~16
 351           * @param  Number 要显示的数字，范围：0~0xFFFF
 352           * @param  Length 要显示数字的长度，范围：1~4
 353           * @retval 无
 354           */
 355          void LCD_ShowHexNum(unsigned char Line, unsigned char Column, unsigned int Number, unsigned char Length)
 356          {
 357   1          unsigned char i, SingleNumber;
 358   1          LCD_SetCursor(Line, Column);
 359   1          for (i = Length; i > 0; i--)
 360   1          {
 361   2              SingleNumber = Number / LCD_Pow(16, i - 1) % 16;
 362   2              if (SingleNumber < 10)
 363   2              {
 364   3                  LCD_WriteData(SingleNumber + '0');
C51 COMPILER V9.60.0.0   BASICALFUNC                                                       01/25/2022 15:04:29 PAGE 7   

 365   3              }
 366   2              else
 367   2              {
 368   3                  LCD_WriteData(SingleNumber - 10 + 'A');
 369   3              }
 370   2          }
 371   1      }
 372          
 373          /**
 374           * @brief  在LCD1602指定位置开始以二进制显示所给数字
 375           * @param  Line 起始行位置，范围：1~2
 376           * @param  Column 起始列位置，范围：1~16
 377           * @param  Number 要显示的数字，范围：0~1111 1111 1111 1111
 378           * @param  Length 要显示数字的长度，范围：1~16
 379           * @retval 无
 380           */
 381          void LCD_ShowBinNum(unsigned char Line, unsigned char Column, unsigned int Number, unsigned char Length)
 382          {
 383   1          unsigned char i;
 384   1          LCD_SetCursor(Line, Column);
 385   1          for (i = Length; i > 0; i--)
 386   1          {
 387   2              LCD_WriteData(Number / LCD_Pow(2, i - 1) % 2 + '0');
 388   2          }
 389   1      }
 390          
 391          /*---------------------------------------
 392          Matrix Key
 393          ---------------------------------------*/
 394          
 395          /**
 396           * @brief 检测矩阵键盘按键
 397           * 
 398           * @return unsigned char 
 399           * @retval KeyNum 键盘号
 400           */
 401          unsigned char MatrixKey()
 402          {
 403   1          unsigned char KeyNum = 0;
 404   1      
 405   1          P2 = 0xFF;
 406   1          P2_3 = 0;
 407   1          if(P2_7 == 0)   {Delay(15); while(P2_7 == 0); Delay(15); KeyNum = 1;}
 408   1          if(P2_6 == 0)   {Delay(15); while(P2_6 == 0); Delay(15); KeyNum = 5;}
 409   1          if(P2_5 == 0)   {Delay(15); while(P2_5 == 0); Delay(15); KeyNum = 9;}
 410   1          if(P2_4 == 0)   {Delay(15); while(P2_4 == 0); Delay(15); KeyNum = 13;}
 411   1      
 412   1          P2 = 0xFF;
 413   1          P2_2 = 0;
 414   1          if(P2_7 == 0)   {Delay(15); while(P2_7 == 0); Delay(15); KeyNum = 2;}
 415   1          if(P2_6 == 0)   {Delay(15); while(P2_6 == 0); Delay(15); KeyNum = 6;}
 416   1          if(P2_5 == 0)   {Delay(15); while(P2_5 == 0); Delay(15); KeyNum = 10;}
 417   1          if(P2_4 == 0)   {Delay(15); while(P2_4 == 0); Delay(15); KeyNum = 14;}
 418   1      
 419   1          P2 = 0xFF;
 420   1          P2_1 = 0;
 421   1          if(P2_7 == 0)   {Delay(15); while(P2_7 == 0); Delay(15); KeyNum = 3;}
 422   1          if(P2_6 == 0)   {Delay(15); while(P2_6 == 0); Delay(15); KeyNum = 7;}
 423   1          if(P2_5 == 0)   {Delay(15); while(P2_5 == 0); Delay(15); KeyNum = 11;}
 424   1          if(P2_4 == 0)   {Delay(15); while(P2_4 == 0); Delay(15); KeyNum = 15;}
 425   1      
 426   1          P2 = 0xFF;
C51 COMPILER V9.60.0.0   BASICALFUNC                                                       01/25/2022 15:04:29 PAGE 8   

 427   1          P2_0 = 0;
 428   1          if(P2_7 == 0)   {Delay(15); while(P2_7 == 0); Delay(15); KeyNum = 4;}
 429   1          if(P2_6 == 0)   {Delay(15); while(P2_6 == 0); Delay(15); KeyNum = 8;}
 430   1          if(P2_5 == 0)   {Delay(15); while(P2_5 == 0); Delay(15); KeyNum = 12;}
 431   1          if(P2_4 == 0)   {Delay(15); while(P2_4 == 0); Delay(15); KeyNum = 16;}
 432   1      
 433   1          return KeyNum;
 434   1      }
 435          
 436          /*---------------------------------------
 437          Key
 438          ---------------------------------------*/
 439          
 440          /**
 441           * @brief 获取独立按键键盘码
 442           * @retval 键盘号 范围：0~4
 443           * @return unsigned char 
 444           */
 445          unsigned char Key()
 446          {
 447   1          unsigned char KeyNum = 0;
 448   1      
 449   1          if(P2_3 == 0)   {Delay(20); while(P2_3 == 0); Delay(20); KeyNum = 1;}
 450   1          if(P2_2 == 0)   {Delay(20); while(P2_2 == 0); Delay(20); KeyNum = 2;}
 451   1          if(P2_1 == 0)   {Delay(20); while(P2_1 == 0); Delay(20); KeyNum = 3;}
 452   1          if(P2_0 == 0)   {Delay(20); while(P2_0 == 0); Delay(20); KeyNum = 4;}
 453   1      
 454   1          return KeyNum;
 455   1      }
 456          
 457          /*---------------------------------------
 458          Timer0 Init
 459          ---------------------------------------*/
 460          /**
 461           * @brief 定时器器0函数初始化函数，12MHz
 462           * @retval 无
 463           */
 464          void Timer0_Init(void)    //1毫秒@12.000MHz
 465          {
 466   1        TMOD &= 0xF0;   //设置定时器模式
 467   1        TMOD |= 0x01;   //设置定时器模式
 468   1        TL0 = 0x18;   //设置定时初始值
 469   1        TH0 = 0xFC;   //设置定时初始值
 470   1        TF0 = 0;    //清除TF0标志
 471   1        TR0 = 1;    //定时器0开始计时
 472   1          ET0 = 1;        //设置中断标志
 473   1          EA = 1;
 474   1          PT0 = 0;
 475   1      }
 476          /*
 477          1s计时器中断函数模板
 478          
 479          void Timer0_Routine() interrupt 1
 480          {
 481              static unsigned int T0_Count = 0;
 482              TL0 = 0x18;
 483              TH0 = 0xFC;
 484              T0_Count++;
 485              if (T0_Count >= 1000)
 486              {
 487                  T0_Count = 0;
 488                  P0_0 = ~P0_0;
C51 COMPILER V9.60.0.0   BASICALFUNC                                                       01/25/2022 15:04:29 PAGE 9   

 489              }
 490          }
 491          */
 492          
 493          /*---------------------------------------
 494          Serial Ports
 495          ---------------------------------------*/
 496          
 497          /**
 498           * @brief 初始化串口(4800bps)
 499           * 
 500           */
 501          
 502          void Uart_Init(void)    //4800bps@12.000MHz
 503          {
 504   1        PCON |= 0x80;   //使能波特率倍速位SMOD
 505   1        SCON = 0x50;    //8位数据,可变波特率
 506   1        TMOD &= 0x0F;   //设置定时器模式
 507   1        TMOD |= 0x20;   //设置定时器模式
 508   1        TL1 = 0xF3;   //设置定时初始值
 509   1        TH1 = 0xF3;   //设置定时重载值
 510   1        ET1 = 0;    //禁止定时器1中断
 511   1        TR1 = 1;    //定时器1开始计时
 512   1          EA = 1;         //中断设置
 513   1          ES = 1;
 514   1      }
 515          
 516          // /**
 517          //  * @brief 初始化串口(可接收)
 518          //  * 
 519          //  * @param MODE 重载时标志参数
 520          //  */
 521          // void Uart_Init(unsigned int MODE)
 522          // {
 523          //     PCON |= 0x80;    //使能波特率倍速位SMOD
 524          //  SCON = 0x50;    //8位数据,可变波特率
 525          //  TMOD &= 0x0F;   //设置定时器模式
 526          //  TMOD |= 0x20;   //设置定时器模式
 527          //  TL1 = 0xF3;   //设置定时初始值
 528          //  TH1 = 0xF3;   //设置定时重载值
 529          //  ET1 = 0;    //禁止定时器1中断
 530          //  TR1 = 1;    //定时器1开始计时
 531          //     EA = 1;
 532          //     ES = 1;
 533          // }
 534          
 535          /**
 536           * @brief 向电脑发送数据
 537           * 
 538           * @param Byte 所发送的1Byte数据
 539           * @retval 无
 540           */
 541          void Uart_SendByte(unsigned char Byte)
 542          {
 543   1          SBUF = Byte;
 544   1          while (TI == 0);
 545   1          TI = 0;     //TI软件复位
 546   1      }
 547          
 548          /*串口控制LED样例
 549          void UART_Routine() interrupt 4
 550          {
C51 COMPILER V9.60.0.0   BASICALFUNC                                                       01/25/2022 15:04:29 PAGE 10  

 551              if(RI == 1)
 552              {
 553                  P0 = ~SBUF;
 554                  Uart_SendByte(SBUF);
 555                  RI = 0;         //RI软件复位
 556              }
 557          }
 558          */
 559          
 560          /*---------------------------------------
 561          DS1302
 562          ---------------------------------------*/
 563          sbit DS1302_SCLK = P3 ^ 4;
 564          sbit DS1302_IO = P3 ^ 5;
 565          sbit DS1302_CE = P3 ^ 6;
 566          
 567          unsigned char DS1302_Time[] = {22, 1, 18, 15, 29, 15, 3};
 568          
 569          /**
 570           * @brief DS1302初始化函数
 571           * 
 572           */
 573          void DS1302_Init()
 574          {
 575   1          DS1302_CE = 0;
 576   1          DS1302_SCLK = 0;
 577   1      }
 578          
 579          /**
 580           * @brief 十进制转BCD码函数
 581           * 
 582           * @param Dec 需要转换的十进制数
 583           * @return unsigned char 
 584           * @retval BCD码
 585           */
 586          unsigned char DS1302_toBCD(unsigned char Dec)
 587          {
 588   1          return Dec / 10 * 16 + Dec % 10;
 589   1      }
 590          
 591          /**
 592           * @brief BCD转十进制函数
 593           * 
 594           * @param Hex 需要转换的BCD码
 595           * @return unsigned char 
 596           * @retval 十进制数
 597           */
 598          unsigned char DS1302_toDec(unsigned char Hex)
 599          {
 600   1          return Hex / 16 * 10 + Hex % 16;
 601   1      }
 602          
 603          /**
 604           * @brief 向DS1302写入数据
 605           * 
 606           * @param Command 写入指令
 607           * @param Data 写入的数据
 608           * @retval 无
 609           */
 610          void DS1302_WriteByte(unsigned char Command, unsigned char Data)
 611          {
 612   1          unsigned char i;
C51 COMPILER V9.60.0.0   BASICALFUNC                                                       01/25/2022 15:04:29 PAGE 11  

 613   1          DS1302_CE = 1;
 614   1      
 615   1          for (i = 0; i < 8; i++) //写入指令
 616   1          {
 617   2              DS1302_IO = Command & (0x01 << i);
 618   2              DS1302_SCLK = 1;
 619   2              DS1302_SCLK = 0;
 620   2          }
 621   1      
 622   1          for (i = 0; i < 8; i++) //写入数据
 623   1          {
 624   2              DS1302_IO = Data & (0x01 << i);
 625   2              DS1302_SCLK = 1;
 626   2              DS1302_SCLK = 0;
 627   2          }
 628   1      
 629   1          DS1302_CE = 0;
 630   1      }
 631          
 632          /**
 633           * @brief 从DS1302读入数据
 634           * 
 635           * @param Command 读出命令
 636           * @return unsigned char 
 637           * @retval 无
 638           */
 639          unsigned char DS1302_ReadByte(unsigned char Command)
 640          {
 641   1          unsigned char i, Data = 0x00;
 642   1          Command |= 0x01;    //将设置的命令转为读取命令
 643   1          DS1302_CE = 1;
 644   1      
 645   1          for (i = 0; i < 8; i++) //写入指令
 646   1          {
 647   2              DS1302_IO = Command & (0x01 << i);
 648   2              DS1302_SCLK = 0;
 649   2              DS1302_SCLK = 1;
 650   2          }
 651   1      
 652   1          for (i = 0; i < 8; i++)
 653   1          {
 654   2              DS1302_SCLK = 1;
 655   2              DS1302_SCLK = 0;
 656   2              if (DS1302_IO)
 657   2              {
 658   3                  Data |= 0x01 << i;
 659   3              }
 660   2          }
 661   1          DS1302_CE = 0;
 662   1          return Data;
 663   1      }
 664          
 665          /**
 666           * @brief 设置时间函数
 667           * 
 668           */
 669          void DS1302_SetTime()
 670          {
 671   1          DS1302_WriteByte(DS1302_WP, 0x00);
 672   1          DS1302_WriteByte(DS1302_YEAR, DS1302_toBCD(DS1302_Time[0]));
 673   1          DS1302_WriteByte(DS1302_MONTH, DS1302_toBCD(DS1302_Time[1]));
 674   1          DS1302_WriteByte(DS1302_DATE, DS1302_toBCD(DS1302_Time[2]));
C51 COMPILER V9.60.0.0   BASICALFUNC                                                       01/25/2022 15:04:29 PAGE 12  

 675   1          DS1302_WriteByte(DS1302_HOUR, DS1302_toBCD(DS1302_Time[3]));
 676   1          DS1302_WriteByte(DS1302_MINUTE, DS1302_toBCD(DS1302_Time[4]));
 677   1          DS1302_WriteByte(DS1302_SECOND, DS1302_toBCD(DS1302_Time[5]));
 678   1          DS1302_WriteByte(DS1302_DATE, DS1302_toBCD(DS1302_Time[6]));
 679   1          DS1302_WriteByte(DS1302_WP, 0x80);
 680   1      }
 681          
 682          /**
 683           * @brief 读取时间函数
 684           * 
 685           */
 686          void DS1302_ReadTime()
 687          {
 688   1          DS1302_Time[0] = DS1302_toDec(DS1302_ReadByte(DS1302_YEAR));
 689   1          DS1302_Time[1] = DS1302_toDec(DS1302_ReadByte(DS1302_MONTH));
 690   1          DS1302_Time[2] = DS1302_toDec(DS1302_ReadByte(DS1302_DATE));
 691   1          DS1302_Time[3] = DS1302_toDec(DS1302_ReadByte(DS1302_HOUR));
 692   1          DS1302_Time[4] = DS1302_toDec(DS1302_ReadByte(DS1302_MINUTE));
 693   1          DS1302_Time[5] = DS1302_toDec(DS1302_ReadByte(DS1302_SECOND));
 694   1          DS1302_Time[6] = DS1302_toDec(DS1302_ReadByte(DS1302_DAY));
 695   1      }
 696          
 697          /**
 698           * @brief 某年某月的天数
 699           * 
 700           * @param Year 
 701           * @param Month 
 702           * @return unsigned char 
 703           */
 704          
 705          unsigned char DS1302_MonthTable[] = {31, 28, 31, 30, 51, 30, 31, 31, 30, 31, 30, 31};
 706          unsigned char DS1302_DayOf(unsigned char Year, unsigned char Month)
 707          {
 708   1          unsigned char year = Year + 2000;
 709   1          if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0)
 710   1          {
 711   2              return Month == 2 ? 29 : DS1302_MonthTable[Month - 1];
 712   2          }
 713   1          return DS1302_MonthTable[Month - 1];
 714   1      }
 715          
 716          /*---------------------------------------
 717          Buzzer
 718          ---------------------------------------*/
 719          
 720          sbit Buzzer = P3 ^ 7;
 721          
 722          /**
 723           * @brief 蜂鸣器延时函数
 724           * 
 725           */
 726          void Buzzer_Delay500us()    //@12.000MHz
 727          {
 728   1        unsigned char i;
 729   1      
 730   1        _nop_();
 731   1        i = 247;
 732   1        while (--i);
 733   1      }
 734          
 735          
 736          /**
C51 COMPILER V9.60.0.0   BASICALFUNC                                                       01/25/2022 15:04:29 PAGE 13  

 737           * @brief 蜂鸣器响X毫秒
 738           * 
 739           * @param _ms 毫秒数
 740           */
 741          void Buzzer_Time(unsigned int _ms)
 742          {
 743   1          unsigned char i = 0;
 744   1          for (i = 0; i < _ms; i++)
 745   1          {
 746   2              Buzzer = !Buzzer;
 747   2              Buzzer_Delay500us();
 748   2          }
 749   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2086    ----
   CONSTANT SIZE    =     19    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19      41
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
